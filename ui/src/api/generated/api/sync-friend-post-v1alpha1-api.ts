/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.19.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JsonPatchInner } from '../models';
// @ts-ignore
import type { SyncFriendPost } from '../models';
// @ts-ignore
import type { SyncFriendPostList } from '../models';
/**
 * SyncFriendPostV1alpha1Api - axios parameter creator
 * @export
 */
export const SyncFriendPostV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create SyncFriendPost
         * @param {SyncFriendPost} [syncFriendPost] Fresh syncfriendpost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSyncFriendPost: async (syncFriendPost?: SyncFriendPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/friend.moony.la/v1alpha1/syncfriendposts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncFriendPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete SyncFriendPost
         * @param {string} name Name of syncfriendpost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncFriendPost: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteSyncFriendPost', 'name', name)
            const localVarPath = `/apis/friend.moony.la/v1alpha1/syncfriendposts/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SyncFriendPost
         * @param {string} name Name of syncfriendpost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncFriendPost: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getSyncFriendPost', 'name', name)
            const localVarPath = `/apis/friend.moony.la/v1alpha1/syncfriendposts/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List SyncFriendPost
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSyncFriendPost: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/friend.moony.la/v1alpha1/syncfriendposts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch SyncFriendPost
         * @param {string} name Name of syncfriendpost
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSyncFriendPost: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchSyncFriendPost', 'name', name)
            const localVarPath = `/apis/friend.moony.la/v1alpha1/syncfriendposts/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update SyncFriendPost
         * @param {string} name Name of syncfriendpost
         * @param {SyncFriendPost} [syncFriendPost] Updated syncfriendpost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSyncFriendPost: async (name: string, syncFriendPost?: SyncFriendPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateSyncFriendPost', 'name', name)
            const localVarPath = `/apis/friend.moony.la/v1alpha1/syncfriendposts/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncFriendPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncFriendPostV1alpha1Api - functional programming interface
 * @export
 */
export const SyncFriendPostV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncFriendPostV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create SyncFriendPost
         * @param {SyncFriendPost} [syncFriendPost] Fresh syncfriendpost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSyncFriendPost(syncFriendPost?: SyncFriendPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncFriendPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSyncFriendPost(syncFriendPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncFriendPostV1alpha1Api.createSyncFriendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete SyncFriendPost
         * @param {string} name Name of syncfriendpost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncFriendPost(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSyncFriendPost(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncFriendPostV1alpha1Api.deleteSyncFriendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get SyncFriendPost
         * @param {string} name Name of syncfriendpost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncFriendPost(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncFriendPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSyncFriendPost(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncFriendPostV1alpha1Api.getSyncFriendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List SyncFriendPost
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSyncFriendPost(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncFriendPostList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSyncFriendPost(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncFriendPostV1alpha1Api.listSyncFriendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch SyncFriendPost
         * @param {string} name Name of syncfriendpost
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSyncFriendPost(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncFriendPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSyncFriendPost(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncFriendPostV1alpha1Api.patchSyncFriendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update SyncFriendPost
         * @param {string} name Name of syncfriendpost
         * @param {SyncFriendPost} [syncFriendPost] Updated syncfriendpost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSyncFriendPost(name: string, syncFriendPost?: SyncFriendPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncFriendPost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSyncFriendPost(name, syncFriendPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncFriendPostV1alpha1Api.updateSyncFriendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SyncFriendPostV1alpha1Api - factory interface
 * @export
 */
export const SyncFriendPostV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncFriendPostV1alpha1ApiFp(configuration)
    return {
        /**
         * Create SyncFriendPost
         * @param {SyncFriendPostV1alpha1ApiCreateSyncFriendPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiCreateSyncFriendPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SyncFriendPost> {
            return localVarFp.createSyncFriendPost(requestParameters.syncFriendPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete SyncFriendPost
         * @param {SyncFriendPostV1alpha1ApiDeleteSyncFriendPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiDeleteSyncFriendPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSyncFriendPost(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get SyncFriendPost
         * @param {SyncFriendPostV1alpha1ApiGetSyncFriendPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiGetSyncFriendPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SyncFriendPost> {
            return localVarFp.getSyncFriendPost(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List SyncFriendPost
         * @param {SyncFriendPostV1alpha1ApiListSyncFriendPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiListSyncFriendPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SyncFriendPostList> {
            return localVarFp.listSyncFriendPost(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch SyncFriendPost
         * @param {SyncFriendPostV1alpha1ApiPatchSyncFriendPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiPatchSyncFriendPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SyncFriendPost> {
            return localVarFp.patchSyncFriendPost(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update SyncFriendPost
         * @param {SyncFriendPostV1alpha1ApiUpdateSyncFriendPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiUpdateSyncFriendPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SyncFriendPost> {
            return localVarFp.updateSyncFriendPost(requestParameters.name, requestParameters.syncFriendPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSyncFriendPost operation in SyncFriendPostV1alpha1Api.
 * @export
 * @interface SyncFriendPostV1alpha1ApiCreateSyncFriendPostRequest
 */
export interface SyncFriendPostV1alpha1ApiCreateSyncFriendPostRequest {
    /**
     * Fresh syncfriendpost
     * @type {SyncFriendPost}
     * @memberof SyncFriendPostV1alpha1ApiCreateSyncFriendPost
     */
    readonly syncFriendPost?: SyncFriendPost
}

/**
 * Request parameters for deleteSyncFriendPost operation in SyncFriendPostV1alpha1Api.
 * @export
 * @interface SyncFriendPostV1alpha1ApiDeleteSyncFriendPostRequest
 */
export interface SyncFriendPostV1alpha1ApiDeleteSyncFriendPostRequest {
    /**
     * Name of syncfriendpost
     * @type {string}
     * @memberof SyncFriendPostV1alpha1ApiDeleteSyncFriendPost
     */
    readonly name: string
}

/**
 * Request parameters for getSyncFriendPost operation in SyncFriendPostV1alpha1Api.
 * @export
 * @interface SyncFriendPostV1alpha1ApiGetSyncFriendPostRequest
 */
export interface SyncFriendPostV1alpha1ApiGetSyncFriendPostRequest {
    /**
     * Name of syncfriendpost
     * @type {string}
     * @memberof SyncFriendPostV1alpha1ApiGetSyncFriendPost
     */
    readonly name: string
}

/**
 * Request parameters for listSyncFriendPost operation in SyncFriendPostV1alpha1Api.
 * @export
 * @interface SyncFriendPostV1alpha1ApiListSyncFriendPostRequest
 */
export interface SyncFriendPostV1alpha1ApiListSyncFriendPostRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof SyncFriendPostV1alpha1ApiListSyncFriendPost
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof SyncFriendPostV1alpha1ApiListSyncFriendPost
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof SyncFriendPostV1alpha1ApiListSyncFriendPost
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof SyncFriendPostV1alpha1ApiListSyncFriendPost
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof SyncFriendPostV1alpha1ApiListSyncFriendPost
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchSyncFriendPost operation in SyncFriendPostV1alpha1Api.
 * @export
 * @interface SyncFriendPostV1alpha1ApiPatchSyncFriendPostRequest
 */
export interface SyncFriendPostV1alpha1ApiPatchSyncFriendPostRequest {
    /**
     * Name of syncfriendpost
     * @type {string}
     * @memberof SyncFriendPostV1alpha1ApiPatchSyncFriendPost
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof SyncFriendPostV1alpha1ApiPatchSyncFriendPost
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateSyncFriendPost operation in SyncFriendPostV1alpha1Api.
 * @export
 * @interface SyncFriendPostV1alpha1ApiUpdateSyncFriendPostRequest
 */
export interface SyncFriendPostV1alpha1ApiUpdateSyncFriendPostRequest {
    /**
     * Name of syncfriendpost
     * @type {string}
     * @memberof SyncFriendPostV1alpha1ApiUpdateSyncFriendPost
     */
    readonly name: string

    /**
     * Updated syncfriendpost
     * @type {SyncFriendPost}
     * @memberof SyncFriendPostV1alpha1ApiUpdateSyncFriendPost
     */
    readonly syncFriendPost?: SyncFriendPost
}

/**
 * SyncFriendPostV1alpha1Api - object-oriented interface
 * @export
 * @class SyncFriendPostV1alpha1Api
 * @extends {BaseAPI}
 */
export class SyncFriendPostV1alpha1Api extends BaseAPI {
    /**
     * Create SyncFriendPost
     * @param {SyncFriendPostV1alpha1ApiCreateSyncFriendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncFriendPostV1alpha1Api
     */
    public createSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiCreateSyncFriendPostRequest = {}, options?: RawAxiosRequestConfig) {
        return SyncFriendPostV1alpha1ApiFp(this.configuration).createSyncFriendPost(requestParameters.syncFriendPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete SyncFriendPost
     * @param {SyncFriendPostV1alpha1ApiDeleteSyncFriendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncFriendPostV1alpha1Api
     */
    public deleteSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiDeleteSyncFriendPostRequest, options?: RawAxiosRequestConfig) {
        return SyncFriendPostV1alpha1ApiFp(this.configuration).deleteSyncFriendPost(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get SyncFriendPost
     * @param {SyncFriendPostV1alpha1ApiGetSyncFriendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncFriendPostV1alpha1Api
     */
    public getSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiGetSyncFriendPostRequest, options?: RawAxiosRequestConfig) {
        return SyncFriendPostV1alpha1ApiFp(this.configuration).getSyncFriendPost(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List SyncFriendPost
     * @param {SyncFriendPostV1alpha1ApiListSyncFriendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncFriendPostV1alpha1Api
     */
    public listSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiListSyncFriendPostRequest = {}, options?: RawAxiosRequestConfig) {
        return SyncFriendPostV1alpha1ApiFp(this.configuration).listSyncFriendPost(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch SyncFriendPost
     * @param {SyncFriendPostV1alpha1ApiPatchSyncFriendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncFriendPostV1alpha1Api
     */
    public patchSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiPatchSyncFriendPostRequest, options?: RawAxiosRequestConfig) {
        return SyncFriendPostV1alpha1ApiFp(this.configuration).patchSyncFriendPost(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update SyncFriendPost
     * @param {SyncFriendPostV1alpha1ApiUpdateSyncFriendPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncFriendPostV1alpha1Api
     */
    public updateSyncFriendPost(requestParameters: SyncFriendPostV1alpha1ApiUpdateSyncFriendPostRequest, options?: RawAxiosRequestConfig) {
        return SyncFriendPostV1alpha1ApiFp(this.configuration).updateSyncFriendPost(requestParameters.name, requestParameters.syncFriendPost, options).then((request) => request(this.axios, this.basePath));
    }
}

